package com.orion.math.function;

import static org.junit.jupiter.api.Assertions.assertTrue;

import com.orion.core.tuple.Pair;
import com.orion.math.function.onevariable.Function1x1;
import com.orion.math.function.onevariable.Function1x1IF;
import com.orion.math.function.onevariable.Function1x1Service;
import com.orion.math.number.ANumber;
import com.orion.math.number.arithmetic.ArithmeticService;
import com.orion.math.number.interval.Interval;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;

// @RunWith(ConcurrentJUnitRunner.class)
public class FunctionServiceTest
{
    @SuppressWarnings("unchecked")
    @Test
    public void test_add1()
    {
        Function1x1IF<ANumber, ANumber> func1 = (ANumber x) -> (ANumber.of(4).multiplyGET(x));
        Function1x1<ANumber, ANumber> f1 = Function1x1.of(func1);
        Function1x1IF<ANumber, ANumber> func2 = (ANumber x) -> (ANumber.of(2).multiplyGET(x).addOneGET());
        Function1x1<ANumber, ANumber> f2 = Function1x1.of(func2);
        ANumber result = Function1x1Service.add(ANumber.of(2), new Function1x1[]
        {f1, f2});
        assertTrue(ANumber.of(13).equal(result));
    }


    @SuppressWarnings("unchecked")
    @Test
    public void test_add2()
    {
        Function1x1IF<ANumber, ANumber> func1 = (ANumber x) -> (ANumber.of(4).multiplyGET(x));
        Function1x1<ANumber, ANumber> f1 = Function1x1.of(func1);
        Function1x1IF<ANumber, ANumber> func2 = (ANumber x) -> (ANumber.of(2).multiplyGET(x).addOneGET());
        Function1x1<ANumber, ANumber> f2 = Function1x1.of(func2);
        Function1x1<ANumber, ANumber> result = Function1x1Service.add(f1, f2);
        assertTrue(ANumber.of(19).equal(result.run(ANumber.of(3))));
    }


    @Test
    public void test_getNValuesOfFunctionIncludingXValues()
    {
        Function1x1IF<ANumber, ANumber> func1 = (ANumber x) -> (ANumber.of(4).multiplyGET(x));
        Function1x1<ANumber, ANumber> f1 = Function1x1.of(func1);
        Interval interval = Interval.of(1, 7);
        ANumber[] expectedXValues = new ANumber[]
        {ANumber.of(1), ANumber.of(4), ANumber.of(7)};
        ANumber[] expectedYValues = new ANumber[]
        {ANumber.of(4), ANumber.of(16), ANumber.of(28)};
        Pair<ANumber[], ANumber[]> expected = Pair.<ANumber[], ANumber[]>of(expectedXValues, expectedYValues);
        Pair<ANumber[], ANumber[]> result = Function1x1Service.getNValuesOfFunctionIncludingXValues(f1, interval, 3);
        assertTrue(expected.equals(result));
    }


    @SuppressWarnings("unchecked")
    @Test
    public void testCompose()
    {
        Function1x1IF<ANumber, ANumber> func1 = (ANumber x) -> (ANumber.of(4).multiplyGET(x));
        Function1x1<ANumber, ANumber> f1 = Function1x1.of(func1);
        Function1x1IF<ANumber, ANumber> func2 = (ANumber x) -> (ANumber.of(2).multiplyGET(x).addOneGET());
        Function1x1<ANumber, ANumber> f2 = Function1x1.of(func2);
        ANumber expected = ANumber.of(20);
        ANumber result = Function1x1Service.compose(ANumber.of(2), new Function1x1[]
        {f1, f2});
        assertTrue(expected.equal(result));
    }


    @Test
    public void testGetRootUsingNewtonRaphson1()
    {
        Function1x1IF<ANumber, ANumber> func = (ANumber x) -> (ANumber.of(2).multiplyGET(x).addOneGET());
        Function1x1<ANumber, ANumber> f = Function1x1.of(func);
        ANumber expected = ANumber.of(-0.5);
        ANumber result = Function1x1Service.getRootUsingNewtonRaphson(f, ANumber.of(0));
        assertTrue(expected.equal(result));
    }


    @Test
    public void testGetRootUsingNewtonRaphson2()
    {
        Function1x1IF<ANumber, ANumber> func = (ANumber x) -> (x.multiplyGET(ArithmeticService.getEToThePowerOf(x.doubleGET())));
        Function1x1<ANumber, ANumber> f = Function1x1.of(func);
        ANumber expected = ANumber.of(

        ANumber result = Function1x1Service.getRootUsingNewtonRaphson(f, ANumber.of("0.1"));
        assertTrue(expected.equal(result));
    }


    @Test
    public void testGetRootUsingNewtonRaphson3()
    {
        Function1x1IF<ANumber, ANumber> func = (ANumber x) -> (x.addGET(ArithmeticService.getEToThePowerOf(x.doubleGET())));
        Function1x1<ANumber, ANumber> f = Function1x1.of(func);
        ANumber expected = ANumber.of(

        ANumber result = Function1x1Service.getRootUsingNewtonRaphson(f, ANumber.of("0.1"));
        assertTrue(expected.equal(result));
    }


    @Test
    public void testGetRootUsingNewtonRaphson4()
    {
        Function1x1IF<ANumber, ANumber> func = (ANumber x) -> (x.squareGET().subtractGET(x.multiplyGET(5)).addGET(6));
        Function1x1<ANumber, ANumber> f = Function1x1.of(func);
        ANumber expected = ANumber.of(

        ANumber result = Function1x1Service.getRootUsingNewtonRaphson(f, ANumber.of("1"));
        assertTrue(expected.equal(result));
    }


    @Test
    public void testGetRootsUsingNewtonRaphson1()
    {
        Function1x1IF<ANumber, ANumber> func = (ANumber x) -> (x.squareGET().subtractGET(x.multiplyGET(5)).addGET(6));
        Function1x1<ANumber, ANumber> f = Function1x1.of(func);
        Interval interval = Interval.of(1, 4);
        ANumber[] expected = new ANumber[]
        {ANumber.of("3.0000348884154425882561953639967092033476418746737870187276570354015"), ANumber.of("2.000005198346704364587093609648994433469157425931765111019736252177309202210448895172616842806623366724285661915070269852707498412210672830586602544310098161263509")};
        ANumber[] result = Function1x1Service.getRootsUsingNewtonRaphson(f, interval, 3);
        assertTrue(Arrays.equals(expected, result));
    }


    @Test
    public void testGetRootsUsingNewtonRaphson2()
    {
        Function1x1IF<ANumber, ANumber> func = (ANumber x) -> (x.squareGET().subtractGET(x.multiplyGET(5)).addGET(6));
        Function1x1<ANumber, ANumber> f = Function1x1.of(func);
        Interval interval = Interval.of(1, 4);
        ANumber[] expected = new ANumber[]
        {ANumber.of("2.0000000000026067638360780292976942279208930151703711115879724199243349609806041773779483540527587430081594872430181875264116282179870035092525439728856226347670741969648457637554272843651747541588895311832733898037511501857793117887418702811062022715112924837081452976562277382975513386425312661589413488831138318986"),
                        ANumber.of("3.00000000000335675325991617471391278374613919773812124659353790785337357990220553918801726743598369617872093688491740099856329869487170024544128444046158767307154235486721570851143799260773024522991646995435432265493847234052142090500053501431666166385456331987292920767232097218514803193691174897784573549493460820399458")};
        ANumber[] result = Function1x1Service.getRootsUsingNewtonRaphson(f, interval, 6);
        assertTrue(Arrays.equals(expected, result));
    }


    @SuppressWarnings("unchecked")
    @Test
    public void test_multiply()
    {
        Function1x1IF<ANumber, ANumber> func1 = (ANumber x) -> (ANumber.of(4).multiplyGET(x));
        Function1x1<ANumber, ANumber> f1 = Function1x1.of(func1);
        Function1x1IF<ANumber, ANumber> func2 = (ANumber x) -> (ANumber.of(2).multiplyGET(x).addOneGET());
        Function1x1<ANumber, ANumber> f2 = Function1x1.of(func2);
        ANumber expected = ANumber.of(40);
        ANumber result = Function1x1Service.multiply(ANumber.of(2), new Function1x1[]
        {f1, f2});
        assertTrue(expected.equal(result));
    }


    @Test
    public void testGetPipeline()
    {
        Function1x1IF<ANumber, ANumber> func1 = (ANumber x) -> (ANumber.of(4).multiplyGET(x));
        Function1x1<ANumber, ANumber> f1 = Function1x1.of(func1);
        Function1x1IF<ANumber, ANumber> func2 = (ANumber x) -> (ANumber.of(2).multiplyGET(x).addOneGET());
        Function1x1<ANumber, ANumber> f2 = Function1x1.of(func2);
        ANumber expected = ANumber.of(17);
        ANumber result = Function1x1Service.runPipeline(f1, ANumber.of(2), f2);
        assertTrue(expected.equal(result));
    }


    @SuppressWarnings("unchecked")
    @Test
    public void testGetPipeline2()
    {
        Function1x1IF<ANumber, ANumber> func1 = (ANumber x) -> (ANumber.of(4).multiplyGET(x));
        Function1x1<ANumber, ANumber> f1 = Function1x1.of(func1);
        Function1x1IF<ANumber, ANumber> func2 = (ANumber x) -> (ANumber.of(2).multiplyGET(x).addOneGET());
        Function1x1<ANumber, ANumber> f2 = Function1x1.of(func2);
        ANumber expected = ANumber.of(17);
        ANumber result = (ANumber)Function1x1Service.runPipeline(new Function1x1[]
        {f1, f2}, ANumber.of(2));
        assertTrue(expected.equal(result));
    }


    @SuppressWarnings("unchecked")
    @Test
    public void testGetPipeline3()
    {
        Function1x1IF<List<ANumber>, ANumber> func1 = (List<ANumber> x) -> (ArithmeticService.add(x));
        Function1x1<List<ANumber>, ANumber> f1 = Function1x1.of(func1);
        Function1x1IF<ANumber, ANumber> func2 = (ANumber x) -> (ANumber.of(2).multiplyGET(x).addOneGET());
        Function1x1<ANumber, ANumber> f2 = Function1x1.of(func2);
        ANumber expected = ANumber.of(13);
        ANumber result = (ANumber)Function1x1Service.runPipeline(new Function1x1[]
        {f1, f2}, Arrays.asList(ANumber.of(1), ANumber.of(2), ANumber.of(3)));
        assertTrue(expected.equal(result));
    }
}